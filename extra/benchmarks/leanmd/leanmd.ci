mainmodule leanmd {

  readonly CProxy_Main mainProxy;       //central controller
  readonly CProxy_Cell cellArray;     //array that houses atoms
  readonly CProxy_Compute computeArray; //computational kernels
  readonly CkGroupID mCastGrpID;      //multicast group handle

  readonly int cellArrayDimX;		// X dimension of the Cell array
  readonly int cellArrayDimY;		// Y dimension of the Cell array
  readonly int cellArrayDimZ;		// Y dimension of the Cell array
  readonly int finalStepCount;		// number of steps in the simulaion
  readonly int firstLdbStep;		// begin load balancing after this many steps
  readonly int ldbPeriod;		// do load balancing every period

  //central controller chare
  mainchare [migratable] Main {
    entry Main(CkArgMsg* msg);
    entry [reductiontarget] void allDone(int done);     //called when simulation is done
    entry [reductiontarget] void computesCreated(int proceed); //called when initial set up is done
    entry [reductiontarget] void sectionsCreated(int proceed); //called when initial set up is done
    entry [reductiontarget] void energySumP(double energyIn);  //reduction of potential energy
    entry [reductiontarget] void energySumK(double energyIn);  //reduction of potential energy

    //this get called after the main constructor has called cell array constructor
    entry void run() {
      //compute array created, call for section creation
      when computesCreated(int proceed) atomic {
        computeArray.doneInserting();
        CkPrintf("Computes: %d .... created\n", (NUM_NEIGHBORS/2+1)*cellArrayDimX*cellArrayDimY*cellArrayDimZ);
        cellArray.createSection();
      }
      //setup done, start program
      when sectionsCreated(int proceed) atomic {
        CkPrintf("Multicast sections .... created\n");
        CkPrintf("Starting simulation .... \n\n");
        cellArray.run();
        computeArray.run();
      }
      //receive initial energy
      when energySumP(double energyP), energySumK(double energyK) atomic {
        prevEnergy = energyP + energyK;
      }
      //receive final energy and compare
      when energySumP(double energyP), energySumK(double energyK) atomic {
        energy = energyP + energyK;
        if(abs(energy-prevEnergy)>ENERGY_VAR) {
          CkPrintf("Energy value has varied significantly from %E to %E\n",prevEnergy,energy);
          testFailed = 1;
        }
      }
      //done with everything exit.
      when allDone(int done) atomic {
        if(testFailed) {
          CkPrintf("\nEnergy conservation test failed for maximum allowed variation of %E units.\nSIMULATION UNSUCCESSFULL\n",ENERGY_VAR);  
        } else {
          CkPrintf("\nEnergy conservation test passed for maximum allowed variation of %E units.\nSIMULATION SUCCESSFULL \n",ENERGY_VAR);
        }
        CkExit();
      }
    };
  };

  //message used to convey particle to computes
  message ParticleDataMsg{
    vec3 part[];
  };

  //chares to house atoms
  array [3D] Cell {
    entry Cell();  
    entry void createComputes();    //call to insert computes that I need  
    entry void createSection();     //creation multicast section of computes
    entry void receiveParticles(CkVec<Particle> updates);   //receive atoms that have migrated to neighboring celles to me
    entry void ResumeFromSync();    //resume from here after load balancing
    entry void resumeAfterLB(int resume);    //resume from here after load balancing
    entry [reductiontarget] void reduceForces(vec3 forces[n], int n);   //receives forces from my computes on my atoms

    //function to perform one iteration of LeanMD
    entry void run() {
      if(thisIndex.x==0 && thisIndex.y==0 && thisIndex.z==0) atomic {
        stepTime = CkWallTimer();
      }
      for(stepCount = 0; stepCount < finalStepCount; stepCount++) {
        atomic {
          sendPositions();    //send current atom positions to my computes
        }
        when reduceForces(vec3 forces[n], int n) {
          atomic {
            updateProperties(forces, n);   //update properties of atoms using new force values
          }
        }
        if (stepCount > 0 && (stepCount %  MIGRATE_STEPCOUNT) == 0) {
          atomic {
            migrateParticles(); //send atoms that have moved beyond my cell to neighbors
          }
          //receive particles from my neighbors
          for(updateCount = 0; updateCount < inbrs; updateCount++) {
            when receiveParticles(CkVec<Particle> &updates) atomic {
              for(int i=0; i < updates.length(); i++) {
                particles.push_back(updates[i]);    //add particles that have moved from neighboring celles to my cell
              }
            }
          }
        }
        //periodically print time values
        if (stepCount && thisIndex.x==0 && thisIndex.y==0 && thisIndex.z==0 && stepCount%20==0) atomic {
          double timer = CkWallTimer();
          CkPrintf("Step %d Benchmark Time %lf ms/step\n", 
              stepCount, ((timer - stepTime)/20)*1000);
          stepTime = CkWallTimer();
        }
        //periodically call load balancer
        if (stepCount >= firstLdbStep && (stepCount - firstLdbStep) % ldbPeriod == 0) {
          atomic {
            AtSync();
          }
          when resumeAfterLB(int resume) atomic {
            stepTime = CkWallTimer();
          }
        }
      }
      //everything is done, call end
      atomic {
        int num;
        contribute(sizeof(int),&num,CkReduction::max_int,CkCallback(CkReductionTarget(Main,allDone),mainProxy));
        //contribute(CkCallback(CkIndex_Main::allDone(), mainProxy));
      }
    };
  };

  //chares that does the force computations for pair of celles
  array [6D] Compute {
    entry Compute();
    entry void ResumeFromSync();
    entry void calculateForces(ParticleDataMsg *msg);

    entry void run() {
      for(stepCount = 0; stepCount < finalStepCount; stepCount++) {
        when calculateForces(ParticleDataMsg *msg) atomic {
          interact(msg);
        }
        if(thisIndex.x1!=thisIndex.x2 || thisIndex.y1!=thisIndex.y2 || thisIndex.z1!=thisIndex.z2) {
          when calculateForces(ParticleDataMsg *msg) atomic {
            interact(msg);
          }
        }
        //periodically call load balancer
        if (stepCount >= firstLdbStep && (stepCount - firstLdbStep) % ldbPeriod== 0) atomic {
          AtSync();
        }
      }
    };
  };
};
