--- GreedyCommLB.C	2013-07-30 14:17:09.199965747 -0300
+++ /home/llpilla/numalb/src/OtherLBs/GreedyCommLB.C	2013-07-31 10:40:16.566452144 -0300
@@ -18,6 +18,7 @@
 #include "ckheap.h"
 #include "GreedyCommLB.h"
 #include "manager.h"
+#include "StatsLB.h"
 
 CreateLBFunc_Def(GreedyCommLB, "Greedy algorithm which takes communication graph into account")
 
@@ -139,6 +140,17 @@
     int i;
     
     if (_lb_args.debug()) CkPrintf("In GreedyCommLB strategy\n",CkMyPe());
+
+  if(_lb_args.debug()){
+      double start, end;
+      start = CmiWallTimer();
+      CentralLB *profiler;
+      profiler = (CentralLB *)AllocateStatsLB();
+      profiler->work(stats);
+      end = CmiWallTimer();
+      CkPrintf("[%d] Profiling took %lf\n",CkMyPe(), end-start);
+  }
+
     npe = stats->nprocs();
     nobj = stats->n_objs;
 
--- GreedyLB.C	2013-07-31 11:12:01.247850652 -0300
+++ /home/llpilla/numalb/src/OtherLBs/GreedyLB.C	2013-07-31 10:39:42.222452000 -0300
@@ -19,6 +19,7 @@
 #include "ckgraph.h"
 #include "cklists.h"
 #include "GreedyLB.h"
+#include "StatsLB.h"
 
 using namespace std;
 
@@ -57,6 +58,16 @@
   int n_pes = stats->nprocs();
   int *map = new int[n_pes];
 
+  if(_lb_args.debug()){
+      double start, end;
+      start = CmiWallTimer();
+      CentralLB *profiler;
+      profiler = (CentralLB *)AllocateStatsLB();
+      profiler->work(stats);
+      end = CmiWallTimer();
+      CkPrintf("[%d] Profiling took %lf\n",CkMyPe(), end-start);
+  }
+
   std::vector<ProcInfo>  procs;
   for(pe = 0; pe < n_pes; pe++) {
     map[pe] = -1;
--- RefineCommLB.C	2013-07-31 10:37:44.002455294 -0300
+++ /home/llpilla/numalb/src/OtherLBs/RefineCommLB.C	2013-07-31 10:17:56.414479784 -0300
@@ -6,6 +6,7 @@
 #include "elements.h"
 #include "ckheap.h"
 #include "RefineCommLB.h"
+#include "StatsLB.h"
 
 CreateLBFunc_Def(RefineCommLB, "Average load among processors by moving objects away from overloaded processor, communication aware")
 
@@ -27,6 +28,16 @@
   int obj;
   int n_pes = stats->nprocs();
 
+  if(_lb_args.debug()){
+      double start, end;
+      start = CmiWallTimer();
+      CentralLB *profiler;
+      profiler = (CentralLB *)AllocateStatsLB();
+      profiler->work(stats);
+      end = CmiWallTimer();
+      CkPrintf("[%d] Profiling took %lf\n",CkMyPe(), end-start);
+  }
+
   //  CkPrintf("[%d] RefineLB strategy\n",CkMyPe());
 
   // RemoveNonMigratable(stats, n_pes);
--- RefineLB.C	2013-07-30 14:17:09.203965747 -0300
+++ /home/llpilla/numalb/src/OtherLBs/RefineLB.C	2013-07-31 10:39:14.178453430 -0300
@@ -6,6 +6,7 @@
 #include "elements.h"
 #include "ckheap.h"
 #include "RefineLB.h"
+#include "StatsLB.h"
 
 CreateLBFunc_Def(RefineLB, "Move objects away from overloaded processor to reach average")
 
@@ -21,6 +22,16 @@
   int obj;
   int n_pes = stats->nprocs();
 
+  if(_lb_args.debug()){
+      double start, end;
+      start = CmiWallTimer();
+      CentralLB *profiler;
+      profiler = (CentralLB *)AllocateStatsLB();
+      profiler->work(stats);
+      end = CmiWallTimer();
+      CkPrintf("[%d] Profiling took %lf\n",CkMyPe(), end-start);
+  }
+
   //  CkPrintf("[%d] RefineLB strategy\n",CkMyPe());
 
   // RemoveNonMigratable(stats, n_pes);
--- ScotchLB.C	2013-07-30 14:17:09.203965747 -0300
+++ /home/llpilla/numalb/src/OtherLBs/ScotchLB.C	2013-07-31 10:40:46.618451523 -0300
@@ -14,6 +14,7 @@
 #include "ScotchLB.h"
 #include "ckgraph.h"
 #include "scotch.h"
+#include "StatsLB.h"
 
 CreateLBFunc_Def(ScotchLB, "Load balancing using the Scotch graph partitioning library")
 
@@ -33,6 +34,16 @@
   ObjGraph *ogr = new ObjGraph(stats);
   double start_time = CmiWallTimer();
 
+  if(_lb_args.debug()){
+      double start, end;
+      start = CmiWallTimer();
+      CentralLB *profiler;
+      profiler = (CentralLB *)AllocateStatsLB();
+      profiler->work(stats);
+      end = CmiWallTimer();
+      CkPrintf("[%d] Profiling took %lf\n",CkMyPe(), end-start);
+  }
+  
   /** ============================= STRATEGY ================================ */
   // convert ObjGraph to the Scotch graph
   SCOTCH_Num baseval = 0;			// starting index of vertices
--- ScotchRefineLB.C	2013-07-30 14:17:09.203965747 -0300
+++ /home/llpilla/numalb/src/OtherLBs/ScotchRefineLB.C	2013-07-31 10:41:12.894450982 -0300
@@ -11,6 +11,7 @@
 #include "ScotchRefineLB.h"
 #include "ckgraph.h"
 #include "scotch.h"
+#include "StatsLB.h"
 
 CreateLBFunc_Def(ScotchRefineLB, "Load balancing using the Scotch graph partitioning library")
 
@@ -26,6 +27,17 @@
 
 void ScotchRefineLB::work(LDStats *stats) {
   /** ========================== INITIALIZATION ============================= */
+
+    if(_lb_args.debug()){
+      double start, end;
+      start = CmiWallTimer();
+      CentralLB *profiler;
+      profiler = (CentralLB *)AllocateStatsLB();
+      profiler->work(stats);
+      end = CmiWallTimer();
+      CkPrintf("[%d] Profiling took %lf\n",CkMyPe(), end-start);
+  }  
+    
   ProcArray *parr = new ProcArray(stats);
   ObjGraph *ogr = new ObjGraph(stats);
   int cost_array[10] = {64, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536};
